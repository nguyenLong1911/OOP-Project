/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package crawler;

import javax.swing.JOptionPane;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import org.json.simple.JSONObject;
import java.io.FileWriter;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.FileReader;

/**
 *
 * @author HP
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Link bài viết");

        jButton1.setText("Lấy thông tin");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Xóa hết");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Xóa");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jEditorPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String url = jTextField1.getText();
        if (url.isEmpty() || !isValidURL(url)) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập URL hợp lệ!!!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        jTextField1.setText("");
    } else {
        getDataFromUrl(url);
        jTextField1.setText("");
    }
}
    
    private boolean isValidURL(String urlStr) {
    try {
        URI uri = new URI(urlStr);
        return uri != null && uri.getScheme() != null && (uri.getScheme().equalsIgnoreCase("http") || uri.getScheme().equalsIgnoreCase("https"));
    } catch (URISyntaxException e) {
        return false;
    }
    }

    private void getDataFromUrl(String url) {
        try {
            Document doc = Jsoup.connect(url).get();

            String title = getTitle(doc);
            String lastUpdatedDate = getLastUpdatedDate(doc);
            String author = getAuthor(doc);
            String source = getSourceFromUrl(url);
            String articleLink = url;
            String hashtags = getHashtags(doc);
            String summary = getSummary(doc);
            String category = getCategoryFromUrl(url);
            String content = getContent(doc);
            String articleType = getArticleType(content, source);

            JSONObject newJsonInfo = new JSONObject();
            newJsonInfo.put("Link bài viết", articleLink);
            newJsonInfo.put("Nguồn website", source);
            newJsonInfo.put("Loại bài viết", articleType);
            newJsonInfo.put("Tóm tắt bài viết", summary);
            newJsonInfo.put("Tiêu đề", title);
            newJsonInfo.put("Nội dung", content);
            newJsonInfo.put("Ngày tạo", extractDate(lastUpdatedDate));
            newJsonInfo.put("Hashtags", hashtags);
            newJsonInfo.put("Tác giả", author);
            newJsonInfo.put("Chuyên mục", category);

            // Đọc dữ liệu JSON hiện tại từ file
        JSONArray jsonArray = new JSONArray();
        try (FileReader reader = new FileReader("Link.json")) {
            JSONParser jsonParser = new JSONParser();
            Object obj = jsonParser.parse(reader);
            if (obj instanceof JSONArray) {
                jsonArray = (JSONArray) obj;
            }
        } catch (IOException | ParseException e) {
            e.printStackTrace();
        }

        // Bổ sung thông tin mới vào mảng JSON
        jsonArray.add(newJsonInfo);

        // Ghi mảng JSON đã cập nhật trở lại vào file
        try (FileWriter fileWriter = new FileWriter("Link.json")) {
            fileWriter.write(jsonArray.toJSONString());
        }

            jEditorPane1.setContentType("text/html");
            jEditorPane1.setText(
            "<html>" +
            "<body>" +
            "<b>Link bài viết:</b> " + articleLink + "<br>" +
            "<b>Nguồn website:</b> " + source + "<br>" +
            "<b>Loại bài viết:</b> " + articleType + "<br>" +
            "<b>Tóm tắt bài viết:</b> " + summary + "<br>" +
            "<b>Tiêu đề:</b> " + title + "<br>" +
            "<b>Nội dung:</b> " + content + "<br>" +
            "<b>Ngày tạo:</b> " + extractDate(lastUpdatedDate) + "<br>" +
            "<b>Hashtags:</b> " + hashtags + "<br>" +
            "<b>Tác giả:</b> " + author + "<br>" +
            "<b>Chuyên mục:</b> " + category +
            "</body>" +
            "</html>" );
            
            jEditorPane1.setCaretPosition(0);
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 
    private String getArticleType(String source,String content) {
    source = source.toLowerCase();
    content = content.toLowerCase();
    if (source.contains("x.com")) {
        return "Tweet";
    } else if (source.contains("blog")||content.contains("blog")) {
        return "Blog Post";
    } else if (source.contains("facebook.com")) {
        return "Facebook Post";
    } else {
        return "News Article";
    }
}

    
    private String getTitle(Document doc) {
        Element titleElement = doc.selectFirst("h1, h2");
        return titleElement != null ? titleElement.text() : "Không có ";
    }

    private String getLastUpdatedDate(Document doc) {
        Element lastUpdatedDiv = doc.selectFirst("div.last-updated-on");
        if (lastUpdatedDiv != null) {
            lastUpdatedDiv.select("span.view").remove();
        }
        String lastUpdatedDate = lastUpdatedDiv != null ? extractDate(lastUpdatedDiv.text()) : "";

        if (lastUpdatedDate.isEmpty()) {
            Element dateDiv = doc.selectFirst("div.writtenby_date");
            lastUpdatedDate = dateDiv != null ? extractDate(dateDiv.text()) : "";

            if (lastUpdatedDate.isEmpty()) {
                Element dateSpan = doc.selectFirst("span.date");
                lastUpdatedDate = dateSpan != null ? extractDate(dateSpan.text()) : "";
                lastUpdatedDate = lastUpdatedDate.replace("|", "").trim();
            }

            if (lastUpdatedDate.isEmpty()) {
                Element timeElement = doc.selectFirst("time.entry-date.updated.td-module-date");
                lastUpdatedDate = timeElement != null ? timeElement.text() : "";
            }

            if (lastUpdatedDate.isEmpty()) {
                Element dateElement = doc.selectFirst("div.font-barlow.text-gray-02.my-auto > div:nth-of-type(2)");
                lastUpdatedDate = dateElement != null ? extractDate(dateElement.text()) : "";
            }

            if (lastUpdatedDate.isEmpty()) {
                Element updatedDateElement = null;
                Elements paragraphs = doc.select("p[color=secondary]");
                for (Element p : paragraphs) {
                    if (p.text().contains("Updated")) {
                        updatedDateElement = p;
                        break;
                    }
                }

                if (updatedDateElement != null) {
                    lastUpdatedDate = updatedDateElement.text();
                }
            }
        }

        return lastUpdatedDate;
    }

    private String getAuthor(Document doc) {
    Element authorLink = doc.selectFirst("a[href*=/authors/]");
    String author = authorLink != null ? authorLink.text() : "";

    if (author.isEmpty()) {
        Element authorDiv = doc.selectFirst("div.ibody3-bold.author-dis-name");
        if (authorDiv != null) {
            Element authorAnchor = authorDiv.selectFirst("a");
            author = authorAnchor != null ? authorAnchor.text() : "";
        }
    }

    if (author.isEmpty()) {
        Element authorSpan = doc.selectFirst("span.written_by_name");
        author = authorSpan != null ? authorSpan.text() : "";
    }

    // Loại bỏ "By" nếu có
    if (author.toLowerCase().startsWith("by ")) {
        author = author.substring(3).trim();
    }

    return author;
}



    private String getSourceFromUrl(String url) {
        try {
            URI uri = new URI(url);
            String domain = uri.getHost();
            if (domain != null) {
                return domain.startsWith("www.") ? domain.substring(4) : domain;
            }
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return "Không xác định";
    }

    private String getHashtags(Document doc) {
        StringBuilder hashtagsBuilder = new StringBuilder();
        boolean foundHashtags = false;

        Element categoryUl = doc.selectFirst("ul.td-category");
        if (categoryUl != null) {
            Elements categoryList = categoryUl.select("li.entry-category");
            for (Element category : categoryList) {
                Element categoryAnchor = category.selectFirst("a");
                if (categoryAnchor != null && !categoryAnchor.text().isEmpty()) {
                    hashtagsBuilder.append("#").append(categoryAnchor.text()).append(", ");
                    foundHashtags = true;
                }
            }
        }

        Elements topicLinks = doc.select("a.font-barlow.breadcrumbs__link");
        for (Element topicLink : topicLinks) {
            if (!topicLink.text().isEmpty()) {
                hashtagsBuilder.append("#").append(topicLink.text()).append(", ");
                foundHashtags = true;
            }
        }

        Elements tagLinks = doc.select("a[rel=tag]");
        for (Element tagLink : tagLinks) {
            if (!tagLink.text().isEmpty()) {
                hashtagsBuilder.append("#").append(tagLink.text()).append(", ");
                foundHashtags = true;
            }
        }

        if (foundHashtags) {
            return hashtagsBuilder.substring(0, hashtagsBuilder.length() - 2);
        }

        return "Không có";
    }

    private String getSummary(Document doc) {
         Elements pElements = doc.select("p.sc-bbc06255-0.jvmCPb");
    StringBuilder allSpanContent = new StringBuilder();
    for (Element pElement : pElements) {
        Elements spanElements = pElement.select("span");
        for (Element spanElement : spanElements) {
            String spanContent = spanElement.text();
            allSpanContent.append(spanContent).append(" ");
        }
    }
    String summary = allSpanContent.toString().trim();
    return summary.isEmpty() ? "Không có" : summary;
       }
    
    private static String getContent(Document doc) {
    Element article = doc.select("article").first();
    if (article != null) {
        return extractContent(article.select("h2, p"));
    } else {
        Element div = doc.select("div.sc-9ed7d608-1.lgayrS").first();
        if (div != null) {
            return extractContent(div.select("h2, p"));
        } else {
            return "Không có";
        }
    }
}
    
    private static String extractContent(Elements elements) {
    StringBuilder contentBuilder = new StringBuilder();
    for (Element element : elements) {
        contentBuilder.append(element.text()).append("\n");
    }
    return contentBuilder.toString();
}

    private String getCategoryFromUrl(String url) {
    try {
        URI uri = new URI(url);
        String path = uri.getPath();
        if (path != null) {
            String[] segments = path.split("/");
            // Lấy phần cuối của đường dẫn
            String lastSegment = segments[segments.length - 1];
            // Loại bỏ các từ không cần thiết và chuyển đổi thành Proper Case
            String category = toProperCase(lastSegment.replaceAll("(?i)-|article|what is|How |Work Blockchain Halving", " "));
            return category;
        }
    } catch (URISyntaxException e) {
        e.printStackTrace();
    }
    return "Không xác định";
}

private String toProperCase(String str) {
    if (str == null || str.isEmpty()) {
        return str;
    }
    StringBuilder properCase = new StringBuilder();
    boolean capitalizeNext = true;
    for (char c : str.toCharArray()) {
        if (Character.isWhitespace(c)) {
            capitalizeNext = true;
            properCase.append(c);
        } else if (capitalizeNext) {
            properCase.append(Character.toTitleCase(c));
            capitalizeNext = false;
        } else {
            properCase.append(Character.toLowerCase(c));
        }
    }
    return properCase.toString();
}


    private static String extractDate(String text) {
    return text.replaceAll("(?i)Published on|last updated on|Updated|• 5 min read|• 3 min read|• 4 min read", "").trim();
    

       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Xóa dữ liệu trong file JSON
    JSONArray emptyJsonArray = new JSONArray();

    try (FileWriter fileWriter = new FileWriter("Link.json")) {
        fileWriter.write(emptyJsonArray.toJSONString());
    } catch (IOException e) {
        e.printStackTrace();
    };
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // Xóa dữ liệu trong text area
      jEditorPane1.setText("");

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
